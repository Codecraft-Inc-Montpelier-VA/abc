/*
 * DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
 */
/*

 * Copyright (c) 2003 - 2021 Codecraft, Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/*
 *++
 * Project:
 *   +abc+ -- a simple test program for coroutines.  <by Cary WR Campbell>
 *
 * Module:
 *   +abc+ executable for macOS or Windows.
 *--
 */
/*
 * Include files
 */
#include "sccorlib.h"
#include <stdio.h>
/*
 * Definitions
 */
#define CR puts( "\r" ) 
/*
 * Variables
 */
volatile bool stop ;
/*
 * Forward References
 */
void strprt( const char *str_ptr ) ;
void counter( int count ) ;
void writeLetter( char c ) ;
/*
 * Main Routine
 */
int main( int argc, char* argv[] ) {
   unsigned long _RBX = 0xbbbbbbbbbbbbbbbb ;
   char temp[ 200 ] ;
   asm ( "movq %0, %%rbx" : /* no outputs */ : "rm" (_RBX) : "%rbx" ) ;
   stop = false ;
   sprintf( temp, "\n-> in main (before cobegin): ebx = %08lx.\n", _RBX ) ;
   strprt( temp ) ;
   CR ;
   cobegin( 3,                              // <1>
               writeLetter,     1, 'b',     // <2>
               writeLetter,     1, 'a',     // <3>
               counter,         1, 10       // <4>
          ) ;
   CR ;
   asm ( "movq %%rbx, %0" : "=rm" (_RBX) : /* no inputs */ ) ;
   sprintf( temp, "\n-> in main (after cobegin): ebx = %08lx.\n\n", _RBX ) ;
   strprt( temp ) ;
   return 0 ;
}
/*
 * Coroutines
 */
void writeLetter( char c ) {
   while ( stop == false ) {
      putchar( c ) ;
      coresume() ;
   }
}
void counter( int count ) {
   unsigned long _RBX = 0xb0b0b0b0b0b0b0b0 ;
   char temp[ 200 ] ;
   asm ( "movq %0, %%rbx" : /* no outputs */ : "rm" (_RBX) : "%rbx" ) ;

   asm ( "movq %%rbx, %0" : "=rm" (_RBX) : /* no inputs */ ) ;
   sprintf( temp, "-> in counter (after changing ebx value): ebx = %08lx.\n\n", _RBX ) ;
   strprt( temp ) ;
   for ( long i = 0; i < count; i++ ) {
      coresume() ;
   }
   stop = true ;
}
/*
 * Utility Routines
 */
void strprt( const char *str_ptr ) {
   while ( *str_ptr ) putchar( *str_ptr++ ) ;
}
